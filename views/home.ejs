<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Image Enhancer</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.6.3/nouislider.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
    <style>
      body {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(black, rgb(13, 96, 64));
        margin: 0;
      }
      .container {
        text-align: center;
        background: #4b6cb7; /* fallback for old browsers */
        background: -webkit-linear-gradient(
          to right,
          #182848,
          #4b6cb7
        ); /* Chrome 10-25, Safari 5.1-6 */
        background: linear-gradient(
          to right,
          #182848,
          #4b6cb7
        ); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        position: absolute;
        z-index: 10;
      }
      h1 {
        margin-bottom: 20px;
      }
      input[type="file"] {
        margin: 10px 0;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 100%;
        max-width: 300px;
      }
      button{
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
      }
      button:hover {
        background-color: #0056b3;
      }

      #preview_img {
        display: none;
        width: 99%;
        height: 500px;
        border: 1px solid #ccc; /* Optional: Add a border for better visibility */
        border-radius: 5px; /* Optional: Add rounded corners */
        margin-top: 10px;
        position: relative;
        z-index: 10;
        /* filter: brightness(0.5) contrast(1.1) saturate(0.5);
        transition: filter 0.3s; */
      }

      #filtered_image {
        display: none;
        width: 100%;
        height: 500px;
        border: 1px solid #ccc; /* Optional: Add a border for better visibility */
        border-radius: 5px; /* Optional: Add rounded corners */
        margin-top: 10px;
        position: absolute;
        z-index: 20;
        /* filter: brightness(0.5) contrast(1.1) saturate(0.5);
        transition: filter 0.3s; */
      }
      .loader {
        display: none;
        width: 50px;
        padding: 8px;
        aspect-ratio: 1;
        border-radius: 50%;
        background: #25b09b;
        position: relative;
        z-index: 20;
        --_m: conic-gradient(#0000 10%, #000),
          linear-gradient(#000 0 0) content-box;
        -webkit-mask: var(--_m);
        mask: var(--_m);
        -webkit-mask-composite: source-out;
        mask-composite: subtract;
        animation: l3 1s infinite linear;
      }
      @keyframes l3 {
        to {
          transform: rotate(1turn);
        }
      }
    </style>
  </head>
  <body>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.6.3/nouislider.min.js"></script>
 
    <span class="loader" id="loder"></span>

    <div class="container">
      
      <form id="uploadForm" enctype="multipart/form-data">
       

        <a
          id="download"
          href=""
          style="
            position: absolute;
            z-index: 20;
            left: 36px;
            bottom: 150px;
            display: none;
           
          "
          ><span class="fas fa-upload"></span
        ></a>

        <img
          id="preview_img"
          src=""
          alt=""
          style="position: relative; z-index: 10"
        />

        <img
          id="filtered_image"
          src=""
          alt=""
          style="position: relative; z-index: 20"
          crossorigin="anonymous"
        />

        <input
          type="file"
          id="imageInput"
          onchange="preview_image()"
          name="image"
          accept="image/*"
          required
        />

        <br />
     
        
        <button onclick="enhance_image(event)">
          <i class="fas fa-upload"></i> Enhance Image
        </button>

        <button  value="" onclick="remove_bg(event)">
          <i class="fas fa-upload"></i>Remove Backround
        </button>
        <button   value="" onclick="image_filtering(event)">
          <i class="fas fa-upload"></i>Filter
        </button>
       

        <input type="hidden" name="bucket" value=" ai-direct-upload" />
        <input type="hidden" name="content_type" value="image/jpeg" />
      </form>
      <div id="result" style="margin-top: 20px"></div>
    </div>

    <script>
      let currentImage = null; // Store the latest version of the image
//  preview image
      function preview_image() {
        let files = document.getElementById("imageInput").files;
        let imageTag = document.getElementById("preview_img");

        if (files.length === 0) {
          alert("Please select an image.");
          return;
        }

        const reader = new FileReader();

        reader.onload = (e) => {
          currentImage = new Image();
          currentImage.src = e.target.result;

          currentImage.onload = () => {
            imageTag.src = currentImage.src;
            imageTag.style.display = "block";
          };
        };

        reader.readAsDataURL(files[0]);
      }

//preview image


// enhance image //

      async function enhance_image(event) {
        event.preventDefault();

        let loader = document.getElementById("loder");
        loader.style.display = "block";

        let form = document.getElementById("uploadForm");
        let image_tag = document.getElementById("filtered_image");
        let preview_imagetag = document.getElementById("preview_img");

        let files = document.getElementById("imageInput").files;
        let link = document.getElementById("download");

        let file = files[0];

        if (files.length === 0) {
          alert("Please select an image.");
          return;
        }

        let formdata = new FormData();
        formdata.append("image", file);

        let response = await fetch("/enhance", {
          method: "POST",
          body: formdata,
        });
        loader.style.display = "block";

        data = await response.json();

       

        if (data.success === true) {
          let loader = document.getElementById("loder");
          loader.style.display = "none";
          preview_imagetag.style.display = "none";

          image_tag.src = data.updated_img;
          image_tag.style.display = "block";

          downloadimage(data.updated_img);
        } else if (data.error === false) {
          alert(data.error);
        }
      }

// enhance image //


// background removel//

      async function remove_bg(event) {
        event.preventDefault();

        let loader = document.getElementById("loder");
        let preview_imagetag = document.getElementById("preview_img");
        let imagetag = document.getElementById("filtered_image");
        let form = document.getElementById("uploadForm");
        let files = document.getElementById("imageInput").files;

        if (files.length === 0) {
          alert("Please select an image.");
          return;
        }

        let file = files[0];
        let img = new Image();
        img.src = URL.createObjectURL(file);

        img.onload = async function () {
          if (img.width > 5000 || img.height > 5000) {
            alert(
              "The image size exceeds 5000x5000 pixels. Please upload a smaller image."
            );
            return;
          }

          // Show loader
          loader.style.display = "block";

          try {
            let form_data = new FormData();
            form_data.append("image", file);

            let response = await fetch("/remove_bg", {
              method: "POST",
              body: form_data,
            });

            console.log(response)
            if (!response.ok) {
              // Handle errors gracefully
              let errorData = await response.json();
               alert("error occured during removing background",error.message)
            }
      
            let data = await response.json();
            let res = await fetch(data.image_url,{method:"GET"})
            if(!res.ok){
            let   error = await res.json()
            console.log(error)
              alert(error.message)
              return
            }

            if(data.success){
              
              preview_imagetag.style.display = "none";

              imagetag.src = data.image_url; // Display processed image

              imagetag.style.display = "block";

              downloadimage(data.image_url);
            }

           
          } catch (error) {
            alert("error occured during removing background",error.message); // Display user-friendly error message
          } finally {
            // Hide loader in both success and error cases
            loader.style.display = "none";
          }
        };

        img.onerror = function () {
          alert(
            "There was an issue loading the image. Please try another file."
          );
        };
      }


// background removel//


// filter image //

      async function image_filtering(event) {
        event.preventDefault();

        let loader = document.getElementById("loder");
        let imagetag = document.getElementById("filtered_image");
        let preview_imagetag = document.getElementById("preview_img");
        let form = document.getElementById("uploadForm");
        let files = document.getElementById("imageInput").files;
        let form_data = new FormData();
        let file = files[0];
        

        if (files.length === 0) {
          alert("Please select an image.");
          return;
        }
        try {
          form_data.append("image", file);

          loader.style.display = "block";

          let response = await fetch("/image_filter", {
            method: "POST",
            body: form_data,
          });

          let data = await response.json();

          if (data.success === true) {
            preview_imagetag.style.display = "none";

            imagetag.src = data.filtered_image;

            imagetag.style.display = "block";
            const originalImage = new Image();
    const reader = new FileReader();

    // FileReader to load the selected image
    reader.onload = function (event) {
        originalImage.src = event.target.result; // Set the source of the original image

        // Wait until the original image is fully loaded
        originalImage.onload = function () {
            // Create a canvas element
            const canvas = document.createElement("canvas");
            const ctx = canvas.getContext("2d");

            // Set canvas size to match the dimensions of the image
            canvas.width = imagetag.naturalWidth;
            canvas.height = imagetag.naturalHeight;

            // Apply filters to the canvas context
            ctx.filter = "brightness(0.9) saturate(1.3) contrast(1)  ";  // Apply a brightness filter

            // Draw the image from the imagetag (filtered image) onto the canvas
            ctx.globalAlpha = 0.8;  // Set transparency for blending
            ctx.drawImage(imagetag, 0, 0, canvas.width, canvas.height);

            // Now draw the original image on top of the filtered image
            ctx.globalAlpha = 0.5;  // Maintain the transparency for blending
            ctx.drawImage(originalImage, 0, 0, canvas.width, canvas.height);

            // Convert the canvas content to a Blob and download
            canvas.toBlob(function (blob) {
                const url = URL.createObjectURL(blob);
                console.log(url)
                imagetag.src =url
                const a = document.createElement("a");
                a.style.display=""
                a.href = url;
                a.download = `filtered_image${Date.now()}.jpg`;  // Set the download file name
                document.body.appendChild(a);
                a.click();
                document.body.removeChild(a);
                imageTag.onload = function() {
        URL.revokeObjectURL(url);
    };  // Clean up the object URL
            },"image/png");
        };
    };

    // Start reading the file as a Data URL
    reader.readAsDataURL(file);

            loader.style.display = "none";
            // imagetag.onload = function () {
            //   downloadImage(imagetag);
            // };
          } else if (data.error) {
            alert(data.error);
          }
        } catch (error) {
          alert(error.message);
        }
      }

// filter image //


// download  image

    function downloadImage(imagetag) {
    // Get the file from the input
    let files = document.getElementById("imageInput").files;
    let file = files[0];

    if (!file) {
        alert("Please select an image.");
        return;
    }

   }


// downnload image//


// download filtered image

      async function downloadimage(imageUrl) {
        try {
          // Fetch the image as a blob
          const response = await fetch(imageUrl);
          const blob = await response.blob();
          const url = URL.createObjectURL(blob);

          // Create an <a> element and trigger download
          let link = document.getElementById("download");
          link.style.display = "inline";

          link.href = url;

          link.download = `processed_img${Date.now()}`; // Name of the file to be downloaded
          document.body.appendChild(link);
          link.click(); // Simulate click to download
          document.body.removeChild(link); // Clean up

          // Release the object URL to free up memory
        } catch (error) {
         
          alert("Failed to download the image.",error.message);
        }
      }


// download filtered image

    </script>
  </body>
</html>
