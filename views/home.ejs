<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Image Enhancer</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.6.3/nouislider.min.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
    <style>
      body {
        font-family: Arial, sans-serif;
        display: flex;
        justify-content: center;
        align-items: center;
        height: 100vh;
        background: linear-gradient(black, rgb(13, 96, 64));
        margin: 0;
      }
      .container {
        text-align: center;
        background: #4b6cb7; /* fallback for old browsers */
        background: -webkit-linear-gradient(
          to right,
          #182848,
          #4b6cb7
        ); /* Chrome 10-25, Safari 5.1-6 */
        background: linear-gradient(
          to right,
          #182848,
          #4b6cb7
        ); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        position: absolute;
        z-index: 10;
      }
      h1 {
        margin-bottom: 20px;
      }
      input[type="file"] {
        margin: 10px 0;
        padding: 10px;
        border: 1px solid #ccc;
        border-radius: 5px;
        width: 100%;
        max-width: 300px;
     
      }
      button {
        padding: 10px 20px;
        background-color: #007bff;
        color: white;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        transition: background-color 0.3s;
      }
      button:hover {
        background-color: #0056b3;
      }

      #preview_img {
        display: none;
        width: 100%;
        height: 500px;
        border: 1px solid #ccc; /* Optional: Add a border for better visibility */
        border-radius: 5px; /* Optional: Add rounded corners */
        margin-top: 10px;
        /* filter: brightness(0.5) contrast(1.1) saturate(0.5);
        transition: filter 0.3s; */
      }

      #filtered_image {
        display: none;
        width: 100%;
        height: 500px;
        border: 1px solid #ccc; /* Optional: Add a border for better visibility */
        border-radius: 5px; /* Optional: Add rounded corners */
        margin-top: 10px;
        /* filter: brightness(0.5) contrast(1.1) saturate(0.5);
        transition: filter 0.3s; */
      }
      .loader {
        display: none;
        width: 50px;
        padding: 8px;
        aspect-ratio: 1;
        border-radius: 50%;
        background: #25b09b;
        position: relative;
        z-index: 20;
        --_m: conic-gradient(#0000 10%, #000),
          linear-gradient(#000 0 0) content-box;
        -webkit-mask: var(--_m);
        mask: var(--_m);
        -webkit-mask-composite: source-out;
        mask-composite: subtract;
        animation: l3 1s infinite linear;
      }
      @keyframes l3 {
        to {
          transform: rotate(1turn);
        }
      }

      
    </style>
  </head>
  <body>
   
    <script src="https://cdnjs.cloudflare.com/ajax/libs/noUiSlider/14.6.3/nouislider.min.js"></script>
    <span class="loader" id="loder"></span>

    <div class="container">
    <!-- <div id="slider" class="noUi-target noUi-ltr noUi-horizontal noUi-txt-dir-ltr bfn-slider"></div> -->
    

      <h1>Image Enhancement Tool</h1>
      <form id="uploadForm" enctype="multipart/form-data">
        <a id="download"  href=""  style="position: absolute;z-index:20;left:36px;bottom: 150px;display:none;"><span class="fas fa-upload"></span></a>

        <img id="preview_img" src="" alt=""   style="position: relative;z-index: 10;"/>
        <img id="filtered_image" src="" alt=""   style="position: relative;z-index: 10;"  crossorigin="anonymous"/>
 

        <input
          type="file"
          id="imageInput"
          onchange="enhance()"
          name="image"
          accept="image/*"
          required
        />

        <br />
        <button type="submit" onclick="enhance_image(event)">
          <i class="fas fa-upload"></i> Enhance Image
        </button>

        <button type="submit" onclick="remove_bg(event)">
          <i class="fas fa-upload"></i>Remove Backround
        </button>
        <button type="submit" onclick="image_filtering(event)">
          <i class="fas fa-upload"></i>Filter
        </button>

        <input type="hidden" name="bucket" value=" ai-direct-upload" />
        <input type="hidden" name="content_type" value="image/jpeg" />
      </form>
      <div id="result" style="margin-top: 20px"></div>
    </div>

    <script>

        
    




      let currentImage = null; // Store the latest version of the image

      function enhance() {
        let files = document.getElementById("imageInput").files;
        let imageTag = document.getElementById("preview_img");

        if (files.length === 0) {
          alert("Please select an image.");
          return;
        }

        const reader = new FileReader();

        reader.onload = (e) => {
          currentImage = new Image();
          currentImage.src = e.target.result;

          currentImage.onload = () => {
            imageTag.src = currentImage.src;
            imageTag.style.display = "block";
          };
        };

        reader.readAsDataURL(files[0]);
      }

      async function enhance_image(event) {
        event.preventDefault();

        let loader = document.getElementById("loder");
        loader.style.display = "block";

        let form = document.getElementById("uploadForm");
        let image_tag = document.getElementById("filtered_image");
        let preview_imagetag = document.getElementById("preview_img");

        let files = document.getElementById("imageInput").files;
          let link = document.getElementById('download')

        let file = files[0];

        if (files.length === 0) {
          alert("Please select an image.");
          return;
        }

        let formdata = new FormData();
        formdata.append("image", file);

        let response = await fetch("/enhance", {
          method: "POST",
          body: formdata,
        });

        loader.style.display = "block";

        data = await response.json();

        if (data.success === true) {
          let loader = document.getElementById("loder");
          loader.style.display = "none";
          preview_imagetag.style.display="none"

          image_tag.src = data.updated_img;
          image_tag.style.display='block'
          
          downloadimage( data.updated_img);

          
        
           
      
      

        }
      }

      async function remove_bg(event) {
        event.preventDefault();

        let loader = document.getElementById("loder");
        let preview_imagetag = document.getElementById("preview_img");
        let imagetag = document.getElementById("filtered_image");
        let form = document.getElementById("uploadForm");
        let files = document.getElementById("imageInput").files;

        if (files.length === 0) {
          alert("Please select an image.");
          return;
        }

        let file = files[0];
        let img = new Image();
        img.src = URL.createObjectURL(file);

        img.onload = async function () {
          if (img.width > 5000 || img.height > 5000) {
            alert(
              "The image size exceeds 5000x5000 pixels. Please upload a smaller image."
            );
            return;
          }

          // Show loader
          loader.style.display = "block";

          try {
            let form_data = new FormData();
            form_data.append("image", file);

            let response = await fetch("/remove_bg", {
              method: "POST",
              body: form_data,
            });

            if (!response.ok) {
              // Handle errors gracefully
              let errorData = await response.json();
              throw new Error(
                errorData.message || "Failed to process image. Try again."
              );
            }
            
            let data = await response.json();
            preview_imagetag.style.display="none"

            imagetag.src = data.image_url; // Display processed image
          image_tag.style.display='block'

            downloadimage( data.image_url)


          } catch (error) {
            alert(error.message); // Display user-friendly error message
          } finally {
            // Hide loader in both success and error cases
            loader.style.display = "none";
          }
        };

        img.onerror = function () {
          alert(
            "There was an issue loading the image. Please try another file."
          );
        };
      }







      async function image_filtering(event) {
        event.preventDefault();
        console.log("start");

        let loader = document.getElementById("loder");
        let imagetag = document.getElementById("filtered_image");
        let preview_imagetag = document.getElementById("preview_img");
        let form = document.getElementById("uploadForm");
        let files = document.getElementById("imageInput").files;
         console.log(imagetag)
        if (files.length === 0) {
          alert("Please select an image.");
          return;
        }
        let file = files[0];
        try {
          let form_data = new FormData();
          form_data.append("image", file);

          loader.style.display = "block";

          console.log(form_data);
          let response = await fetch("/image_filter", {
            method: "POST",
            body: form_data,
          });
          let data = await response.json();
          console.log(data)
          if (data.success === true) {
            preview_imagetag.style.display="none"
            
            imagetag.style.display='block'
           
            imagetag.src = data.filtered_image;
            loader.style.display = "none";
            downloadimage(data.filtered_image)
            
          }
          else if(data.error)
          {
            alert(data.error)
          }
        } catch (error) {
          alert(error.message);
        }
      }




 async function downloadimage(imageUrl) {
  try {
    // Fetch the image as a blob
    const response = await fetch(imageUrl);
    const blob = await response.blob();
    const url = URL.createObjectURL(blob);

    // Create an <a> element and trigger download
    let link = document.getElementById('download');
    link.style.display='inline'

    link.href = url;
    
    link.download = `processed_img${Date.now()}`; // Name of the file to be downloaded
    document.body.appendChild(link);
    link.click(); // Simulate click to download
    document.body.removeChild(link); // Clean up

    // Release the object URL to free up memory
    
  } catch (error) {
    console.log("Error downloading the image:",error.message);
    alert("Failed to download the image.");
  }
}

// function downloadImage() {
//   const img = document.getElementById('filtered_image');

// // Check if the image has loaded
// img.onload = function() {
//     // Create a canvas element
//     const canvas = document.createElement('canvas');
//     const ctx = canvas.getContext('2d');

//     // Set canvas size to match the image
//     canvas.width = img.naturalWidth;
//     canvas.height = img.naturalHeight;

//     // // Apply CSS filters
//     // ctx.filter = 'blur(-1px)'
//     // 'brightness(0.6) contrast(0.9) saturate(1) '; // Same filters as CSS

//     // Draw the image onto the canvas
//     ctx.drawImage(img, 0, 0, canvas.width, canvas.height);

//     // Convert the canvas to a Blob and trigger the download
//     canvas.toBlob(function(blob) {
//         const url = URL.createObjectURL(blob);

//         // Create a link to download the image
//         const a = document.createElement('a');
//         a.href = url;
//         a.download = 'filtered_image.png'; // Specify the file name
//         document.body.appendChild(a);
//         a.click();
//         document.body.removeChild(a); // Remove the link after downloading
//         URL.revokeObjectURL(url); // Clean up
//     }, 'image/png');
// };

// // Set the image source
// img.src = img.src;
// }


    </script>
  </body>
</html>
<!-- <div class="noUi-connect" style="transform: translate(0%, 0px) scale(0.5, 1);"></div><div class="noUi-origin" style="transform: translate(-500%, 0px); z-index: 4;"></div> -->